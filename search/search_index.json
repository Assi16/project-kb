{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"project \"KB\"","text":"<p>The goal of <code>Project KB</code> is to enable the creation, management and aggregation of a distributed, collaborative knowledge base of vulnerabilities affecting open-source software.</p> <p><code>Project KB</code> consists of vulnerability data as well as set of tools to support the mining, curation and management of such data.</p>"},{"location":"#available-tools","title":"Available Tools","text":"Prospector Kaybee"},{"location":"#prospector","title":"Prospector","text":"<p>Prospector is a vulnerability data mining tool that aims at reducing the effort needed to find security fixes for known vulnerabilities in open source software repositories.</p> <p>Given a vulnerability advisory and a software repository, it analyses them to produce a report in which commits are ranked according to the likelihood that they fix the vulnerability.</p>"},{"location":"#kaybee","title":"Kaybee","text":"<p>KayBee is a vulnerability data management tool, it makes possible to fetch the vulnerability statements from this repository (or from any other repository) and export them to a number of formats, including a script to import them to a Steady backend.</p>"},{"location":"#vulnerability-data","title":"Vulnerability data","text":"<p>The vulnerability data of Project KB are stored in textual form as a set of YAML files, in the vulnerability-data branch.</p>"},{"location":"#publications","title":"Publications","text":"<p>In early 2019, a snapshot of the knowlege base from project \"KB\" was described in:</p> <ul> <li>Serena E. Ponta, Henrik Plate, Antonino Sabetta, Michele Bezzi, C\u00e9dric     Dangremont, A Manually-Curated Dataset of Fixes to Vulnerabilities of     Open-Source Software, MSR, 2019</li> </ul> <p>If you use the dataset for your research work, please cite it as:</p> <pre><code>@inproceedings{ponta2019msr,\n    author={Serena E. Ponta and Henrik Plate and Antonino Sabetta and Michele Bezzi and\n    C\u00b4edric Dangremont},\n    title={A Manually-Curated Dataset of Fixes to Vulnerabilities of Open-Source Software},\n    booktitle={Proceedings of the 16th International Conference on Mining Software Repositories},\n    year=2019,\n    month=May,\n}\n</code></pre> <p>MSR 2019 DATA SHOWCASE SUBMISSION: please find here the data and the scripts described in that paper</p> <p>If you wrote a paper that uses the data or the tools from this repository, please let us know (through an issue) and we'll add it to this list.</p>"},{"location":"#credits","title":"Credits","text":""},{"location":"#eu-funded-research-projects","title":"EU-funded research projects","text":"<p>The development of Project KB is partially supported by the following projects:</p> <ul> <li>AssureMOSS (Grant No.952647).</li> <li>Sparta (Grant No.830892).</li> </ul>"},{"location":"#vulnerability-data-sources","title":"Vulnerability data sources","text":"<p>Vulnerability information from NVD and MITRE might have been used as input for building parts of this knowledge base. See MITRE's CVE Usage license for more information.</p>"},{"location":"#limitations-and-known-issues","title":"Limitations and Known Issues","text":"<p>This project is work-in-progress, you can find the list of known issues here.</p> <p>Currently the vulnerability knowledge base only contains information about vulnerabilities in Java and Python open source components.</p>"},{"location":"#support","title":"Support","text":"<p>For the time being, please use GitHub issues to report bugs, request new features and ask for support.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>See How to contribute.</p>"},{"location":"contributing/","title":"How to contribute to project \"KB\"","text":"<p>Welcome to the contribution guidelines for project \"KB\". This webpage provides information on how to contribute to our two different tools: Prospector and KayBee.</p>"},{"location":"contributing/#prospector","title":"Prospector","text":"<p>If you're interested in contributing to the development of Prospector, the following pages provide instructions on setting up the development environment and how to contribute to our project.</p> <ul> <li>Development Setup</li> <li>Contribution Guidelines</li> </ul>"},{"location":"contributing/#kaybee","title":"Kaybee","text":"<p>If you're interested in contributing to the development of Kaybee, the following pages provide instructions on setting up the development environment and how to contribute to our project.</p> <ul> <li>Development Setup</li> <li>Contribution Guidelines</li> </ul>"},{"location":"contributing/#do-you-want-to-contribute-to-the-documentation","title":"Do you want to contribute to the documentation?","text":"<p>You are most welcome to do so, project \"KB\" needs every one of you to succeed, every drop matters!</p> <p>Thanks!</p> <p>The project \"KB\" team</p>"},{"location":"faq/","title":"Frequently Asked Questions (F.A.Q.)","text":""},{"location":"faq/#troubleshooting","title":"Troubleshooting","text":"How do I get support? <p>If you need help with project KB, with its data or with the <code>kaybee</code> tool, the most efficient way to get support is to ask on this Gitter channel.</p>"},{"location":"faq/#misc","title":"Misc","text":"What is the relation of project \"KB\" with Eclipse Steady? <p>Eclipse Steady needs code-level data about how vulnerabilities (basically, which commit in which repository fix which vulnerability). Project \"KB\" promotes a collaborative approach to curating such data.</p>"},{"location":"kaybee/","title":"KayBee","text":""},{"location":"kaybee/#installation","title":"Installation","text":"<p>The installation of the <code>kaybee</code> tool consists in just downloading the appropriate binary for your operating system. Make sure it is executable; you might want to also ensure that it is in the <code>$PATH</code>, for your convenience.</p> <p>For example, in Linux you would put the following line in your <code>.bashrc</code> file:</p> <pre><code>export PATH=$PATH:/usr/local/bin/kaybee\n</code></pre> <p>(please, make sure you adjust the path to the <code>kaybee</code> binary as necessary)</p> <p>Alternatively, you can clone this repository and build it yourself (you will need <code>go</code> and <code>make</code>). You can do so with the <code>make</code> command; inspecting the Makefile first is a good idea.</p>"},{"location":"kaybee/#configuration","title":"Configuration","text":"<p>The operation of the <code>kaybee</code> command is controlled via a configuration file and with command flags and switches (these take priority over the configuration).</p> <p>To create a configuration file, just run <code>kaybee setup</code>; you will have to edit it manually to make it work with your particular setup (for example, the Steady endpoint is set to a dummy value in the default configuration file, you will need to change that to import data from a Steady backend).</p> <p>The configuration file, by default, is called <code>kaybeeconf.yaml</code> and is searched for in the current directory and, if it is not there, in your home.</p> <p>You can put the file in any location (and give it a different name), and instruct <code>kaybee</code> to use it with the global flag <code>-c</code>. For example:</p> <pre><code>kaybee -c /path/to/your/configfile.yaml &lt;command here...&gt;\n</code></pre> <p>Editing such a configuration file is necessary because that's were you can specify the list of sources from which you intend to retrieve vulnerability data from and a few other things, the most important of which are covered in the following.</p> <p>If you have just downloaded the tool, the easiest way to start configuring it is to run:</p> <pre><code>kaybee setup\n</code></pre> <p>which will create a template configuration file in the current folder. You will need to edit it to tailor it to your needs (it contains extensive comments to guide you). At the very least, you will need to configure one or more sources, as in this example:</p> <pre><code>sources:\n- repo: https://github.com/sap/project-kb\n  branch: vulnerability-data\n  rank: 10\n</code></pre> <p>Please refer to the output of <code>kaybee help</code> and <code>kaybee &lt;command&gt; help</code> to know what flags and options are available.</p>"},{"location":"kaybee/#retrieving-vulnerability-data","title":"Retrieving vulnerability data","text":"<p>This is achieved with the command:</p> <pre><code>kaybee pull\n</code></pre> <p>The result will be a local clone of each of the sources. You can manually inspect their content and interact with them as with any other cloned git repository (that is what they are after all).</p> <p>Unless you only consume data from one source, this is not very useful per se: things get more interesting when you use <code>kaybee</code> to merge the content of different sources, which is covered next.</p>"},{"location":"kaybee/#merging-vulnerability-data","title":"Merging  vulnerability data","text":"<p>The idea underlying project \"KB\" is to allow multiple independent parties to maintain their own vulnerability data repository, and then to allow users to define how the data from these sources is to be aggregated and reconciled.</p> <p>This is achieved with the command:</p> <pre><code>kaybee merge\n</code></pre> <p>Unless instructed otherwise, the <code>kaybee</code> command will apply a conservative policy (called <code>strict</code>) which will not attempt to reconcile statements that refer to the same vulnerability. This is still useful in practice if the vulnerabilities covered by different sources are mostly distinct; also, because this policy is very conservative, it is suitable for unattended executions of the tool (say, in a cron job that pulls and merges vulnerability data on a regular basis). Other policies are possible, and at the time of writing (June 2020), an experimental <code>soft</code> policy is under development: this policy will allow statements to be reconciled and their contents to be merged automatically (under certain conditions).</p> <p>The tool can be instructed to use a particular policy by setting the corresponding option in the configuration file, or via the command line flag <code>-p</code>, as in:</p> <pre><code>kaybee merge -p strict\nkaybee merge -p soft\n</code></pre>"},{"location":"kaybee/#exporting-vulnerability-data","title":"Exporting vulnerability data","text":"<p>The <code>kaybee export</code> command can be used to export statements to a number of formats. For example, this command:</p> <pre><code>kaybee export -t xml\n</code></pre> <p>or the equivalent:</p> <pre><code>kaybee export --target xml\n</code></pre> <p>examines the content of the directory <code>.kaybee/merged</code>, which contains the results of the last run of <code>kaybee merge</code> and exports the statements contained there to XML.</p> <p>It is important to stress that the export capabilities of <code>kaybee</code> are very generic, and allow users to write their own exporters to arbitrary text-based formats (called export <code>targets</code>, hence the <code>-t</code> flag).</p> <p>An example of a completely different export target is <code>steady</code>:</p> <pre><code>kaybee export -t steady\n</code></pre> <p>or equivavalently:</p> <pre><code>kaybee export --target steady\n</code></pre> <p>The result this time is a script (<code>steady.sh</code>) that can be executed to import vulnerability data to an Eclipse Steady server.</p> <p>To export a folder other than the default, one can use the <code>--from</code> option, like so:</p> <pre><code>kaybee export --target steady --from /path/to/the/statements/you/wish/to/export\n</code></pre>"},{"location":"kaybee/#creating-new-vulnerability-statements","title":"Creating new vulnerability statements","text":"<p>You can use <code>kaybee create</code> to create a skeleton for you to edit.</p> <p>Alternatively, you can take an existing statement as a reference, but this is more tedious and error prone.</p> <p>A <code>check</code> command is planned, to validate a statement. Also, a more user-friendly GUI-based wizard will probably come later on.</p>"},{"location":"kaybee/#publishing","title":"Publishing","text":"<p>To be written....</p>"},{"location":"kaybee/#contributing","title":"Contributing","text":"<ul> <li>How to contribute</li> </ul>"},{"location":"prospector/","title":"Prospector","text":"Note <p>Prospector is a research prototype, currently under development: the instructions below are intended for development, testing and demonstration purposes only!</p> <p>Please note that Windows is not supported while WSL and WSL2 are fine.</p> <p>Prospector is a tool to reduce the effort needed to find security fixes for known vulnerabilities in open source software repositories.</p> <p>Given an advisory expressed in natural language, Prospector processes the commits found in the target source code repository, ranks them based on a set of predefined rules, and produces a report that the user can inspect to determine which commits to retain as the actual fix.</p>"},{"location":"prospector/#setup-run","title":"Setup &amp; Run","text":"Warning <p>The tool requires Docker and Docker-compose, as it employes Docker containers for certain functionalities. Make sure you have Docker installed and running before proceeding with the setup and usage of Prospector.</p> <p>To quickly set up Prospector:</p> <ol> <li>Clone the project KB repository <pre><code>git clone https://github.com/sap/project-kb\n</code></pre></li> <li> <p>Navigate to the prospector folder <pre><code>cd project-kb/prospector\n</code></pre></p> </li> <li> <p>Execute the bash script run_prospector.sh specifying the -h flag. This will display a list of options that you can use to customize the execution of Prospector. <pre><code>./run_prospector.sh -h\n</code></pre> The bash script builds and starts the required Docker containers. Once the building step is completed, the script will show the list of available options.</p> </li> </ol> Option Description <code>vuln_id</code> ID of the vulnerability to analyze <code>-h</code>, <code>--help</code> Show help message and exit <code>--repository REPOSITORY</code> Git repository URL <code>--preprocess-only</code> Perform commit preprocessing only <code>--pub-date PUB_DATE</code> Publication date of the advisory <code>--description DESCRIPTION</code> Advisory description <code>--max-candidates MAX_CANDIDATES</code> Maximum number of candidates to consider <code>--version-interval VERSION_INTERVAL</code> Version or tag interval X:Y to consider <code>--modified-files MODIFIED_FILES</code> Names (or partial names) comma-separated that the commits are supposed to modify <code>--filter-extensions FILTER_EXTENSIONS</code> Filter out commits that do not modify at least one file with this extension <code>--keywords KEYWORDS</code> Consider these specific keywords <code>--use-nvd</code>, <code>--no-use-nvd</code> Get data from NVD or not <code>--fetch-references</code> Fetch content of references linked from the advisory <code>--backend BACKEND</code> URL of the backend server <code>--use-backend {always,never,optional}</code> Use the backend server or not <code>--report {html,json,console,all}</code> Format of the report (options: console, json, html, all) <code>--report-filename REPORT_FILENAME</code> File to save the report <code>-c CONFIG</code>, <code>--config CONFIG</code> Configuration file <code>-p</code>, <code>--ping</code> Ping the server to check if it's online <code>-l {DEBUG,INFO,WARNING,ERROR,CRITICAL}</code>, <code>--log-level {DEBUG,INFO,WARNING,ERROR,CRITICAL}</code> Set the logging level <code>--ignore-refs IGNORE_REFS</code> Whether to ignore the fact that the fixing commit is reachable directly from the advisory <ol> <li>Try the following example: <pre><code>./run_prospector.sh CVE-2020-1925 --repository https://github.com/apache/olingo-odata4\n</code></pre></li> </ol> <p>By default, Prospector saves the results in a HTML file named prospector-report.html.</p> Success <p>Open the prospector-report.html file in a web browser to view what Prospector was able to find!</p> <p> </p> Prospector Report for CVE-2020-1925"},{"location":"prospector/#tool-demostration","title":"Tool Demostration","text":""},{"location":"prospector/#video-recording","title":"Video Recording","text":"<p>A video recording of the tool demo is also available here</p> <p>The steps shown in the video are the following:</p> <ol> <li>Cloning the project \u201cKB\u201d GitHub repository</li> <li>Execution of the script run_prospector.sh from the prospector subfolder. The script automatically builds and starts all the necessary docker containers</li> <li>The command line flags are shown on the screen; for the demo, we use the strictly required inputs only, which are: (A) a vulnerability identifier and (B) the URL of the source code repository of the project affected by the vulnerability</li> <li>As illustrative example, Prospector is executed on CVE-2020-1925 and the Apache Olingo repository. As the tool runs, we give a high-level explanation of the processing it performs (advisory record extraction, candidate commits retrieval and processing, rule application, report generation).</li> <li>The report generated at the end of the previous step is shown and its key elements are described.</li> <li>We highlight the fact that the advisory content is processed to extract important tokens (keywords, file names, etc.).</li> <li>We explain that commits are ranked by their relevance, which is computed by applying a set of rules to each of them. The sum of the weights of the rules that match a commit determine its relevance. The list of commits shown in the report can be filtered by a applying a relevance threshold using a slider.</li> <li>As a concrete example, we point out that the tool detected that the first commit in the list modifies a class that is mentioned in the textual description of the advisory.</li> </ol>"},{"location":"prospector/#contributing","title":"Contributing","text":"<ul> <li>How to contribute</li> </ul>"},{"location":"team/","title":"Team","text":"<p>Coming soon...</p>"},{"location":"user_manual/","title":"User Manual","text":""},{"location":"user_manual/#summary","title":"Summary","text":"<p>This is the user manual of the <code>kaybee</code> tool, which is part of <code>project KB</code>.</p> <p>WARNING: this document is work in progress. Some of the commands mentioned below might not be fully implemented at this time.</p> <p>Please refer to the output of <code>kaybee help</code> and <code>kaybee &lt;command&gt; help</code> to know what flags and options are available.</p>"},{"location":"user_manual/#commands","title":"Commands","text":""},{"location":"user_manual/#create","title":"<code>create</code>","text":"<p>The <code>create</code> command is used to create vulnerability statements.</p>"},{"location":"user_manual/#pull","title":"<code>pull</code>","text":"<p>The <code>pull</code> command is used to retrieve statements from remote sources to the local machine.</p>"},{"location":"user_manual/#merge","title":"<code>merge</code>","text":"<p>The <code>merge</code> command is used to aggregate (and possibly reconcile) vulnerability statements coming from different sources.</p>"},{"location":"user_manual/#import","title":"<code>import</code>","text":"<p>The <code>import</code> command is used to import vulnerability data from a variety of services/formats, in particular from a Steady backend.</p>"},{"location":"user_manual/#export","title":"<code>export</code>","text":"<p>The <code>export</code> command is used to export vulnerability statements to multiple formats.</p>"},{"location":"user_manual/#list","title":"<code>list</code>","text":"<p>note: this is still not implemented at this time (v0.6.5)</p> <p>The <code>list</code> command is used to display the content of statement repositories (remote or local).</p>"},{"location":"user_manual/#purge","title":"<code>purge</code>","text":"<p>The <code>purge</code> command deletes all the local clones of remote sources that have not been updated for longer than a specified amount of time. This command is used to ensure compliance to data retention policies, and can be invoked, for example, as a recurrent scheduled job.</p>"},{"location":"user_manual/#update","title":"<code>update</code>","text":"<p>The <code>update</code> command is used to check if a newer version of the tool is available, and if so, to update it.</p>"},{"location":"user_manual/#version","title":"<code>version</code>","text":"<p>The <code>version</code> command is used to show detailed information about the current version of <code>kaybee</code>.</p>"},{"location":"user_manual/#configuration","title":"Configuration","text":"<p>to be written</p>"},{"location":"kaybee/dev_setup/","title":"Development Setup","text":"<p>Coming soon...</p>"},{"location":"kaybee/guidelines/","title":"Contribution Guidelines","text":""},{"location":"kaybee/guidelines/#do-you-intend-to-contribute-with-new-vulnerability-data","title":"Do you intend to contribute with new vulnerability data?","text":"<p>A structured process to create and share vulnerability data is work in progress.</p> <p>For the time being, you can use <code>kaybee create &lt;VULN.ID&gt;</code> to generate a skeleton statement that you can then edit with a normal text editor.</p> <p>You can then create pull requests against the <code>vulnerability-data</code> branch in this repository or you can host the statements in your own repository (please do let us know if you choose this option so that we can benefit from your work by pulling your statements).</p> <p>You will need to dedicate a branch to the statements: the branch must contain a top-level <code>statements</code> folder in which you can store your statements. You can refer to the <code>vulnerability-data</code> branch in this repository to see what is the expected structure.</p> <p>Your statement should provide, at least, a vulnerability identifier (use the CVE identifier if it exists), the URL of the source code repository of the affected component and one or more identifiers of the commits used to fix the vulnerability.</p>"},{"location":"kaybee/guidelines/#did-you-find-a-bug","title":"Did you find a bug?","text":"<ul> <li> <p>Ensure the bug was not already reported by searching on GitHub under Issues.</p> </li> <li> <p>If you're unable to find an open issue addressing the problem, open a new one. Be sure to include a title and clear description, as much relevant information as possible, and a code sample or an executable test case demonstrating the expected behavior that is not occurring.</p> </li> </ul>"},{"location":"kaybee/guidelines/#did-you-write-a-patch-that-fixes-a-bug","title":"Did you write a patch that fixes a bug?","text":"<ul> <li>Open a new GitHub pull request with the patch.</li> <li>Ensure the PR description clearly describes the problem and solution. Include the relevant issue number if applicable.</li> <li>Add one or more test cases as appropriate</li> <li>Make sure all other tests and checks still pass (that is, run <code>make check</code> in the <code>kaybee</code> folder; it should succeed)</li> </ul>"},{"location":"kaybee/guidelines/#did-you-fix-whitespace-format-code-or-make-a-purely-cosmetic-patch","title":"Did you fix whitespace, format code, or make a purely cosmetic patch?","text":"<p>Changes that are cosmetic in nature and do not add anything substantial to the stability, functionality, or testability are accepted at this time.</p>"},{"location":"kaybee/guidelines/#do-you-intend-to-add-a-new-feature-or-change-an-existing-one","title":"Do you intend to add a new feature or change an existing one?","text":"<p>Suggest your change by creating an issue  and start writing code in your own fork and make a PR when ready. Please make sure you provide tests for your code, and ensure you can successfully execute <code>make check</code> (in the <code>kaybee</code> folder) with no errors and that you include adequate documentation in your code.</p>"},{"location":"kaybee/guidelines/#do-you-have-questions-about-the-source-code","title":"Do you have questions about the source code?","text":"<p>For now, file an issue (we consider that the need of clarifications at this stage indicates missing or inadequate documentation).</p>"},{"location":"prospector/dev_setup/","title":"Development Setup","text":""},{"location":"prospector/dev_setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10</li> <li>postgreSQL</li> <li>gcc g++ libffi-dev python3-dev libpq-dev</li> <li>Docker &amp; Docker-compose</li> </ul>"},{"location":"prospector/dev_setup/#setup","title":"Setup","text":"<p>You can setup everything and install the dependencies by running: <pre><code>make setup\nmake dev-setup\n</code></pre></p> <p>This is necessary only the first time you set up your dev. environment.</p> <p>Afterwards, you will just have to set the environment variables using the <code>.env</code> file and sourcing it with:</p> <pre><code>set -a; source .env; set +a\n</code></pre> <p>You can configure prospector from CLI or from the <code>config.yaml</code> file. The (recommended) API Keys for Github and the NVD can be configured from the <code>.env</code> file (which must then be sourced with <code>set -a; source .env; set +a</code>)</p> <p>If at any time you wish to use a different version of the python interpreter, beware that the <code>requirements.txt</code> file contains the exact versioning for <code>python 3.10.6</code>.</p> <p>If you have issues with these steps, please open a Github issue and explain in detail what you did and what unexpected behaviour you observed (also indicate your operating system and Python version).</p> Tip <p>this project adopts <code>black</code> for code formatting. You may want to configure your editor so that autoformatting is enforced \"on save\". The pre-commit hook ensures that black is run prior to committing anyway, but the auto-formatting might save you some time and avoid frustration.</p> <p>If you use VSCode, this can be achieved by pasting these lines in your configuration file:</p> <pre><code>    \"python.formatting.provider\": \"black\",\n    \"editor.formatOnSave\": true,\n</code></pre>"},{"location":"prospector/dev_setup/#starting-the-backend-database-and-the-job-workers","title":"Starting the backend database and the job workers","text":"<p>If you run the client without running the backend you will get a warning and have slower response times when making multiple queries.</p> <p>You can then start the necessary containers with the following command:</p> <p><code>make docker-setup</code></p> <p>This also starts a convenient DB administration tool at http://localhost:8080</p> <p>If you wish to cleanup docker to run a fresh version of the backend you can run:</p> <p><code>make docker-clean</code></p>"},{"location":"prospector/dev_setup/#starting-the-restful-server","title":"Starting the RESTful server","text":"<p><code>uvicorn api.main:app --reload</code></p> <p>Note, that it requires <code>POSTGRES_USER</code>, <code>POSTGRES_HOST</code>, <code>POSTGRES_PORT</code>, <code>POSTGRES_DBNAME</code> to be set in the .env file.</p> <p>You can then point your browser to <code>http://127.0.0.1:8000</code> to access the API. You might also want to take a look at <code>http://127.0.0.1:8000/docs</code>.</p> <p>Alternatively, you can execute the RESTful server explicitly with:</p> <p><code>python api/main.py</code></p> <p>which is equivalent but more convenient for debugging.</p>"},{"location":"prospector/dev_setup/#running-the-cli-version","title":"Running the CLI version","text":"<p>The script <code>run_prospector.sh</code> also containerize the CLI version of the tool. To execute Prospector outside of the docker container run <code>python cli/main.py</code></p>"},{"location":"prospector/dev_setup/#testing","title":"Testing","text":"<p>Prospector makes use of <code>pytest</code>.</p> Note <p>before using it please make sure to have running instances of the backend and the database.</p>"},{"location":"prospector/dev_setup/#found-a-bug","title":"Found a Bug?","text":"<p>If you find a bug, please open an issue. If you can also fix the bug, please create a pull request (make sure it includes a test case that passes with your correction but fails without it)</p> <ul> <li>See How to contribute</li> </ul>"},{"location":"prospector/issues/","title":"Issue Tracker","text":""},{"location":"prospector/issues/#reporting-an-issue","title":"Reporting an Issue","text":"<p>If you encounter a bug or have a specific feature request, please follow these steps to report it:</p> <ol> <li>Go to the Issues section.</li> <li>Click on the New Issue button.</li> <li>Provide a descriptive title for your issue.</li> <li>In the issue description, include the following information:</li> <li>Steps to reproduce the issue (if applicable).</li> <li>Expected behavior.</li> <li>Actual behavior observed.</li> <li>Any relevant error messages or logs.</li> <li>Screenshots or code snippets (if applicable and helpful).</li> <li>Add appropriate labels to categorize the issue (e.g., bug, enhancement).</li> <li>Click on the Submit new issue button to create the issue.</li> </ol>"},{"location":"prospector/issues/#contributing-to-issue-resolution","title":"Contributing to Issue Resolution","text":"<p>If you're interested in contributing to the resolution of open issues, you can follow these steps:</p> <ol> <li>Go to the Issues section.</li> <li>Browse through the list of open issues and find one that you'd like to work on.</li> <li>Fork the repository, create a new branch and make your code changes.</li> <li>Open a new GitHub pull request with the patch.</li> <li>Make sure that the pull request (PR) description provides a comprehensive explanation of both the problem and the proposed solution.</li> </ol>"}]}